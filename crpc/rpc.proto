syntax = "proto3";

package crpc;
/**
 * Comments in this file will be directly parsed into the API
 * Documentation as descriptions of the associated method, message, or field.
 * These descriptions should go right above the definition of the object, and
 * can be in either block or /// comment format.
 *
 * One edge case exists where a // comment followed by a /// comment in the
 * next line will cause the description not to show up in the documentation. In
 * that instance, simply separate the two comments with a blank line.
 */

service Connector {
    //
    // CreateAddress is used to create deposit address in choosen blockchain
    // network.
    //
    // NOTE: Works only for blockchain daemons.
    rpc CreateAddress (CreateAddressRequest) returns (Address);

    //
    // AccountAddress return the deposit address of account.
    //
    // NOTE: Works only for blockchain daemons.
    rpc AccountAddress (AccountAddressRequest) returns (Address);

    //
    // PendingBalance return the amount of funds waiting to be confirmed.
    //
    // NOTE: Works only for blockchain daemons.
    rpc PendingBalance (PendingBalanceRequest) returns (Balance);

    //
    // PendingTransactions return the transactions which has confirmation
    // number lower the required by payment system.
    //
    // NOTE: Works only for blockchain daemons.
    rpc PendingTransactions (PendingTransactionsRequest) returns (PendingTransactionsResponse);

    //
    // GenerateTransaction generates raw blockchain transaction.
    //
    // NOTE: Blockchain endpoint.
    rpc GenerateTransaction (GenerateTransactionRequest) returns (GenerateTransactionResponse);

    //
    // SendTransaction send the given transaction to the blockchain network.
    //
    // NOTE: Works only for blockchain daemons.
    rpc SendTransaction (SendTransactionRequest) returns (EmtpyResponse);

    //
    // Info returns the information about the connector, it configaration and
    // network information of daemon with which it is working.
    rpc Info (InfoRequest) returns (InfoResponse);

    //
    // CreateInvoice creates recept for sender lightning node which contains
    // the information about receiver node and
    //
    // NOTE: Works only for lightning network daemons.
    rpc CreateInvoice (CreateInvoiceRequest) returns (Invoice);

    //
    // SendPayment is used to send specific amount of money inside lightning
    // network.
    //
    // NOTE: Works only for lightning network daemons.
    rpc SendPayment (SendPaymentRequest) returns (EmtpyResponse);

    //
    // CheckReachable checks that given node can be reached from our
    // lightning node.
    //
    // NOTE: Works only for lightning network daemons.
    rpc CheckReachable (CheckReachableRequest) returns (CheckReachableResponse);

    //
    // Estimate estimates the dollar price of the choosen asset.
    rpc Estimate (EstimateRequest) returns (EstimationResponse);
}

message EstimateRequest {
    string asset = 1;
    string amount = 2;
}

message EstimationResponse {
    string usd = 1;
}

message CreateAddressRequest {
    string account = 1;
    string asset = 2;
}

message AccountAddressRequest {
    string account = 1;
    string asset = 2;
}

message PendingBalanceRequest {
    string account = 1;
    string asset = 2;
}

message PendingTransactionsRequest {
    string account = 1;
    string asset = 2;
}

message GenerateTransactionResponse {
    bytes raw_tx = 1;
    string tx_id = 2;
}

message SubcribeOnPaymentsRequest {
    // Asset is the acronim name of asset.
    string asset = 1;

    // Type is a type of network which is used to deliver the payment.
    string type = 2;
}

// BlockchainPendingPayment is the transaction with confirmations number lower
// than required by the payment system to be treated as confirmed.
message BlockchainPendingPayment {
    Payment payment = 1;

    // Confirmations is the number of confirmations.
    int64 confirmations = 2;

    // ConfirmationsLeft is the number of confirmations left in order to
    // interpret the transaction as confirmed.
    int64 confirmations_left = 3;
}

// Payment is the structure which describe the action of funds movement from
// one user to another.
message Payment {
    // ID is an number which identifies the transaction inside the payment
    // system.
    string id = 1;

    // Amount is an number of money which is translated from one User to
    // another in this transaction.
    string amount = 2;

    // Account is the receiver account.
    string account = 3;

    // Address is an address of receiver.
    string address = 4;

    // Type is a type of network which is used to deliver the payment.
    string type = 5;
}

message EmtpyResponse {
}

message Balance {
    string data = 1;
}

message Address {
    string data = 1;
}

message Invoice {
    string data = 1;
}

message CheckReachableRequest {
    string asset = 1;
    string identity_key = 2;
}

message PendingTransactionsResponse {
    repeated BlockchainPendingPayment payments = 1;
}

message GenerateTransactionRequest {
    string asset = 1;
    string receiver_address = 2;
    string amount = 3;
}

message SendTransactionRequest {
    string asset = 1;
    bytes raw_tx = 2;
}

message InfoRequest {
}

message LightningInfo {
    string host = 1;

    // Port is the port over which other peers could connect to the lightning
    // network daemon.
    string port = 2;

    // MinAmount is the minimal amount of funds which could be used for
    // payment via the lightning network daemon.
    string min_amount = 3;

    // MaxAmount is the maximum amount of funds which could be used for
    // payment via lightning network deaemon.
    string max_amount = 4;

    // IdentityPubKey of lightning network node.
    string identity_pubkey = 5;

    // Alias is the string which represents the lightning network node in the
    // network, this data could be seen in peer-to-peer discovery messages.
    string alias = 6;

    // NumPendingChannels is the number of channels which are in the state of
    // awaitaning for blockchain confirmation.
    uint32 num_pending_channels = 7;

    // NumPendingChannels is the number of channels which were confirmed and
    // could be used for payments.
    uint32 num_active_channels = 8;

    // Number of peers
    uint32 num_peers = 9;

    // The node's current view of the height of the best block
    uint32 block_height = 10;

    // The node's current view of the hash of the best block
    string block_hash = 11;
}

message InfoResponse {
    // Net represent currently configures blockchain network supported by
    // service.
    Net net = 1;

    // Time is the current connector local time.
    string time = 2;

    LightningInfo lighting_info = 3;
}

message CreateInvoiceRequest {
    string asset = 1;
    string account = 2;
    string amount = 3;

}

message SendPaymentRequest {
    string asset = 1;
    string invoice = 2;
}

message CheckReachableResponse {
    bool isReachable = 2;
}

// Asset is the list of a trading assets which are available in the exchange
// platform.
enum Asset {
    BTC = 0;
    BCH = 1;
    ETH = 2;
    LTC = 3;
    DASH = 4;
}

// Market is the list of trading markets which are available on the
// exchange platform.
enum Market {
    BTCETH = 0;
    BTCBTH = 1;
    BTCLTC = 2;
    BTCDASH = 3;
    ETHLTC = 4;
}

enum Net {
    Simnet = 0;
    Testnet = 1;
    Mainnet = 2;
}